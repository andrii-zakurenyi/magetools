---
linters:
  # disable-all: true
  # enable:
  #   - megacheck
  #   - govet
  exclude-use-default: false # Some key checks that will be missing if the default of 'true' is kept.
  enable-all: true

  disable:
    - scopelint
    - paralleltest
    - staticcheck
    - noctx
    - wsl
    - lll
    - maligned
    - golint
    - interfacer
    - wrapcheck # disable wrapcheck as Mage project. Don't need to wrap
    - nlreturn # until it supports autofix, just ignore as too much manual work
    - prealloc
    - gci
    - goimports
    - gofmt
    - exhaustivestruct
    - godox
    - nonamedreturns # not useful, opinionated and I prefer clarity
  # presets:
  #   - bugs
  #   - unused
  # bugs|comment|complexity|error|format|import|metalinter|module|performance|sql|style|test|unused
  # fast: true
issues:
  exclude-rules:
    - path: _test\.go
      linters:
        - goerr113
        - wrapcheck
        - funlen # complexity length in tests isn't a big concern
        - cyclop # complexity length in tests isn't a big concern
        - gocognit # complexity length in tests isn't a big concern
        - unparam # unused params in tests isn't as important
        - varnamelen # don't worry about variable name length in test code (nice to keep clean, but not important enough to speed time on)
        - revive # additional checks like constants and more aren't important in the test code
    - linters:
        - goerr113
      text: do not define dynamic errors
    - path: .*mage.*go
      linters:
        - goerr113
        - wrapcheck
    - linters:
        - goerr113
      text: magefiles don't need to worry about wrapping in the same way
    - linters:
        - govet
        - revive
      text: 'shadow: declaration of .err. shadows declaration' # err shadowing is a normal practice, don't worry about this
run:
  skip-dirs:
    - cmd/test-files
    - build
    - artifacts
    - _tools
    - starter/*
    - _artifacts/
    - _test.go

  # lint magefile, but ignore tools.go
  build-tags:
    - mage
    - tools
    # - tools

linters-settings:
  wrapcheck:
    ignorePackageGlobs:
      - github.com/sheldonhull/magetools/*
      #  - docgen/*
      #  - ci/*
      #  - fancy/*
      #  - gittools/*
      #  - gotools/*
      #  - licensing/*
      #  - starter/*
      #  - tooling/*

  goimports:
    local-prefixes: github.com/sheldonhull
  misspell:
    locale: US
  nolintlint:
    # Enable to ensure that nolint directives are all used. Default is true.
    allow-unused: false
    # Disable to ensure that nolint directives don't have a leading space. Default is true.
    allow-leading-space: true
    # Exclude following linters from requiring an explanation.  Default is [].
    allow-no-explanation: []
    # Enable to require an explanation of nonzero length after each nolint directive. Default is false.
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed. Default is false.
    require-specific: true
  gci:
    # put imports beginning with prefix after 3rd-party packages;
    # only support one prefix
    # if not set, use goimports.local-prefixes
    local-prefixes: github.com/sheldonhull
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  gofumpt:
    # Select the Go version to target. The default is `1.15`.
    lang-version: '1.17'

    # Choose whether or not to use the extra rules that are disabled
    # by default
    extra-rules: true
  godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      # - NOTE
      - OPTIMIZE # marks code that should be optimized before merging
      - HACK # marks hack-arounds that should be removed before merging
      - TODO
      - BUG
      - FIXME

  godot:
    # comments to be checked: `declarations`, `toplevel`, or `all`
    scope: declarations
    # list of regexps for excluding particular comment lines from check
    exclude:
      # example: exclude comments which contain numbers
      # - '[0-9]+'
    # check that each sentence starts with a capital letter
    capital: true

  depguard:
    list-type: blacklist
    include-go-root: false
    packages:
      - github.com/sirupsen/logrus
    packages-with-error-message:
      # specify an error message to output when a blacklisted package is used
      - github.com/sirupsen/logrus: logging is allowed only by zerolog. Please use zerolog
  revive:
    # see https://github.com/mgechev/revive#available-rules for details.
    ignore-generated-header: true
    severity: warning
    rules:
      - name: indent-error-flow
        severity: warning
  varnamelen:
    # The longest distance, in source lines, that is being considered a "small scope." (defaults to 5)
    # Variables used in at most this many lines will be ignored.
    max-distance: 15 # updated to 10 since we wrap struct and param lines pretty heavily
    # The minimum length of a variable's name that is considered "long." (defaults to 3)
    # Variable names that are at least this long will be ignored.
    min-name-length: 3
    # Check method receiver names. (defaults to false)
    check-receiver: false
    # Check named return values. (defaults to false)
    check-return: false
    # Ignore "ok" variables that hold the bool return value of a type assertion. (defaults to false)
    ignore-type-assert-ok: true
    # Ignore "ok" variables that hold the bool return value of a map index. (defaults to false)
    ignore-map-index-ok: true
    # Ignore "ok" variables that hold the bool return value of a channel receive. (defaults to false)
    ignore-chan-recv-ok: true
    # Optional list of variable names that should be ignored completely. (defaults to empty list)
    ignore-names:
      - err
      - tt
      - tc
      - i
      - x
      - id
      - b # for functions using byte input this is acceptable nomenclature
      - is # for testing framework
